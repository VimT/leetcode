//! 完全子集的最大元素和

/// 一个完全集除了仅由完全平方数构成以外，还可以仅由完全平方数的k倍构成
pub fn maximum_sum(nums: Vec<i32>) -> i64 {
    let len = nums.len();
    let mut result = nums.iter().max().copied().unwrap() as i64;
    for i in 0..len {
        let mut this = 0;
        for j in 1.. {
            let idx = (i + 1) * j * j;
            if idx > len { break; }
            this += nums[idx - 1] as i64;
        }
        result = result.max(this);
    }
    result
}

fn main() {
    fn test(func: fn(nums: Vec<i32>) -> i64) {
        assert_eq!(func(vec![33969, 24796, 64674, 1378, 12216, 70450, 58226, 71401, 64921, 95169, 5383, 47175, 24892, 4130, 74768, 54172, 31625, 781067253, 25106074, 57175513, 1, 240671921, 95079775, 520810854, 1, 344117679, 575539902, 678498979, 443032835, 685824944, 152895587, 1, 784748873, 667662128, 109570671, 654252351, 763152321, 716977360, 750506142, 574160523, 629177330, 386270189, 317284125, 668042248, 620709633, 325542831, 407572002, 610115189, 320351721, 412659468, 1, 1, 527228178, 359984365, 1, 149339083, 1, 136493305, 100938728, 754000216, 5751596, 582609624, 275055892, 114306242, 21277447, 91154507, 745223795, 663228215, 1, 474272254, 39451110]), 1193822919);
        assert_eq!(func(vec![8, 7, 3, 5, 7, 2, 4, 9]), 16);
        assert_eq!(func(vec![5, 10, 3, 10, 1, 13, 7, 9, 4]), 19);
    }
    test(maximum_sum);
}
